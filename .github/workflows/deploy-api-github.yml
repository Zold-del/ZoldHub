name: Test API Build

on:
  push:
    branches: [ main ]
    paths:
      - 'api/**'  # Déclenchement uniquement lors des modifications dans le dossier api

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './api/package.json'
      
      - name: Install dependencies
        run: |
          cd api
          npm ci
      
      - name: Lint & Check code
        run: |
          cd api
          # Vérification du format et des erreurs de code
          echo "Vérification du code API..."
          npm run lint || echo "Pas de lint configuré, ignoré"
          
      - name: Test API build
        run: |
          cd api
          # Vérifier que l'API peut démarrer sans erreur
          echo "Test de compilation de l'API..."
          node -e "try { require('./src/index'); console.log('✅ API compilation check passed!'); } catch (e) { console.error('❌ API compilation failed:', e); process.exit(1); }"
      
      - name: Verify configuration
        env:
          # Utiliser des valeurs factices pour les tests de configuration
          MONGODB_URI: mongodb://localhost:27017/test
          JWT_SECRET: test_secret_for_ci
          PORT: 5000
        run: |
          cd api
          echo "Vérification de la configuration de l'API..."
          # Créer un fichier .env temporaire pour le test
          echo "MONGODB_URI=$MONGODB_URI" > .env
          echo "JWT_SECRET=$JWT_SECRET" >> .env
          echo "PORT=$PORT" >> .env
          # Vérifier que les variables d'environnement sont bien chargées
          node -e "require('dotenv').config(); console.log('✅ Configuration check passed!', { requiredVars: ['MONGODB_URI', 'JWT_SECRET', 'PORT'], foundVars: Object.keys(process.env).filter(k => ['MONGODB_URI', 'JWT_SECRET', 'PORT'].includes(k)) });"